while (NextC == TRUE){
templateWord = B[Row_index, 1]
nextWord = B[Row_index+ii, 1]
if(length(grep(templateWord,nextWord))>0) {
# Operation here
B[Row_index,2:ncol(B)] = B[Row_index,2:ncol(B)] + B[Row_index+ii, 2:ncol(B)]
ii = ii + 1
print(ii)
} else {NextC == FALSE}
}
End_index = nrow(B)
gap = End_index - Row_index
Row_index = Row_index + 1
print(Row_index)
}
rm(list = ls())
libs <- c('tm','stringr')
lapply(libs,require,character.only = TRUE)
options(stringsAsFactors = FALSE)
setwd("G:/Codes/Text_Mining/R script_Yile")
A = read.csv("TDM77.csv", header = TRUE)
c <- matrix(nrow(A[1]), ncol = 1)
# c[, 1] = A[, 1]
temp = str_detect(A[,1], "^[a-z]+$")
temp1 = as.matrix(temp)
c = temp1
B = A[c,];
Row_index = 1
gap = 1
while (gap >= 0){
NextC = TRUE
ii = 1
print(ii)
while (NextC == TRUE){
templateWord = B[Row_index, 1]
nextWord = B[Row_index+ii, 1]
print(templateWord)
print(nextWord)
print(length(grep(templateWord,nextWord)))
if(length(grep(templateWord,nextWord))>0) {
# Operation here
B[Row_index,2:ncol(B)] = B[Row_index,2:ncol(B)] + B[Row_index+ii, 2:ncol(B)]
ii = ii + 1
print(ii)
} else {NextC == FALSE}
}
End_index = nrow(B)
gap = End_index - Row_index
Row_index = Row_index + 1
print(Row_index)
}
rm(list = ls())
libs <- c('tm','stringr')
lapply(libs,require,character.only = TRUE)
options(stringsAsFactors = FALSE)
setwd("G:/Codes/Text_Mining/R script_Yile")
A = read.csv("TDM77.csv", header = TRUE)
c <- matrix(nrow(A[1]), ncol = 1)
# c[, 1] = A[, 1]
temp = str_detect(A[,1], "^[a-z]+$")
temp1 = as.matrix(temp)
c = temp1
B = A[c,];
Row_index = 1
gap = 1
while (gap >= 0){
NextC = TRUE
ii = 1
print(ii)
while (NextC == TRUE){
templateWord = B[Row_index, 1]
nextWord = B[Row_index+ii, 1]
print(templateWord)
print(nextWord)
print(length(grep(templateWord,nextWord)))
if(length(grep(templateWord,nextWord))>0) {
# Operation here
B[Row_index,2:ncol(B)] = B[Row_index,2:ncol(B)] + B[Row_index+ii, 2:ncol(B)]
ii = ii + 1
print(ii)
} else {NextC == FALSE}
}
End_index = nrow(B)
gap = End_index - Row_index
Row_index = Row_index + 1
print(Row_index)
}
rm(list = ls())
libs <- c('tm','stringr')
lapply(libs,require,character.only = TRUE)
options(stringsAsFactors = FALSE)
setwd("G:/Codes/Text_Mining/R script_Yile")
A = read.csv("TDM77.csv", header = TRUE)
c <- matrix(nrow(A[1]), ncol = 1)
# c[, 1] = A[, 1]
temp = str_detect(A[,1], "^[a-z]+$")
temp1 = as.matrix(temp)
c = temp1
B = A[c,];
Row_index = 1
gap = 1
while (gap >= 0){
NextC = TRUE
ii = 1
print(ii)
while (NextC == TRUE){
templateWord = B[Row_index, 1]
nextWord = B[Row_index+ii, 1]
print(templateWord)
print(nextWord)
print(length(grep(templateWord,nextWord)))
if(length(grep(templateWord,nextWord))>0) {
# Operation here
B[Row_index,2:ncol(B)] = B[Row_index,2:ncol(B)] + B[Row_index+ii, 2:ncol(B)]
ii = ii + 1
print(ii)
} else {NextC == FALSE}
print(NextC)
}
End_index = nrow(B)
gap = End_index - Row_index
Row_index = Row_index + 1
print(Row_index)
}
rm(list = ls())
libs <- c('tm','stringr')
lapply(libs,require,character.only = TRUE)
options(stringsAsFactors = FALSE)
setwd("G:/Codes/Text_Mining/R script_Yile")
A = read.csv("TDM77.csv", header = TRUE)
c <- matrix(nrow(A[1]), ncol = 1)
# c[, 1] = A[, 1]
temp = str_detect(A[,1], "^[a-z]+$")
temp1 = as.matrix(temp)
c = temp1
B = A[c,];
Row_index = 1
gap = 1
while (gap >= 0){
NextC = TRUE
ii = 1
print(ii)
while (NextC == TRUE){
templateWord = B[Row_index, 1]
nextWord = B[Row_index+ii, 1]
print(templateWord)
print(nextWord)
print(length(grep(templateWord,nextWord)))
if(length(grep(templateWord,nextWord))>0) {
# Operation here
B[Row_index,2:ncol(B)] = B[Row_index,2:ncol(B)] + B[Row_index+ii, 2:ncol(B)]
ii = ii + 1
print(ii)
} else {NextC = FALSE}
print(NextC)
}
End_index = nrow(B)
gap = End_index - Row_index
Row_index = Row_index + 1
print(Row_index)
}
print("the gap is", gap)
sprintf("the gap is", gap)
sprintf("the gap is %d", gap)
rm(list = ls())
libs <- c('tm','stringr')
lapply(libs,require,character.only = TRUE)
options(stringsAsFactors = FALSE)
setwd("G:/Codes/Text_Mining/R script_Yile")
A = read.csv("TDM77.csv", header = TRUE)
c <- matrix(nrow(A[1]), ncol = 1)
# c[, 1] = A[, 1]
temp = str_detect(A[,1], "^[a-z]+$")
temp1 = as.matrix(temp)
c = temp1
B = A[c,];
Row_index = 1
gap = 1
while (gap >= 0){
NextC = TRUE
ii = 1
print(ii)
while (NextC == TRUE){
templateWord = B[Row_index, 1]
if(nchar(templateWord) < 4) break
nextWord = B[Row_index+ii, 1]
print(templateWord)
print(nextWord)
print(length(grep(templateWord,nextWord)))
if(length(grep(templateWord,nextWord))>0) {
# Operation here
B[Row_index,2:ncol(B)] = B[Row_index,2:ncol(B)] + B[Row_index+ii, 2:ncol(B)]
ii = ii + 1
print(ii)
} else {NextC = FALSE}
print(NextC)
}
End_index = nrow(B)
gap = End_index - Row_index
Row_index = Row_index + 1
sprintf("the gap is %d", gap)
print(Row_index)
}
rm(list = ls())
libs <- c('tm','stringr')
lapply(libs,require,character.only = TRUE)
options(stringsAsFactors = FALSE)
setwd("G:/Codes/Text_Mining/R script_Yile")
A = read.csv("TDM77.csv", header = TRUE)
c <- matrix(nrow(A[1]), ncol = 1)
# c[, 1] = A[, 1]
temp = str_detect(A[,1], "^[a-z]+$")
temp1 = as.matrix(temp)
c = temp1
B = A[c,];
Row_index = 1
gap = 1
while (gap >= 0){
NextC = TRUE
ii = 1
print(ii)
while (NextC == TRUE){
templateWord = B[Row_index, 1]
if(nchar(templateWord) < 6) break
nextWord = B[Row_index+ii, 1]
print(templateWord)
print(nextWord)
#   print(length(grep(templateWord,nextWord)))
if(length(grep(templateWord,nextWord))>0) {
# Operation here
B[Row_index,2:ncol(B)] = B[Row_index,2:ncol(B)] + B[Row_index+ii, 2:ncol(B)]
ii = ii + 1
#      print(ii)
} else {NextC = FALSE}
print(NextC)
}
End_index = nrow(B)
gap = End_index - Row_index
Row_index = Row_index + 1
sprintf("the gap is %d", gap)
print(Row_index)
}
rm(list = ls())
libs <- c('tm','stringr')
lapply(libs,require,character.only = TRUE)
options(stringsAsFactors = FALSE)
setwd("G:/Codes/Text_Mining/R script_Yile")
A = read.csv("TDM77.csv", header = TRUE)
c <- matrix(nrow(A[1]), ncol = 1)
# c[, 1] = A[, 1]
temp = str_detect(A[,1], "^[a-z]+$")
temp1 = as.matrix(temp)
c = temp1
B = A[c,];
Row_index = 1
gap = 1
while (gap >= 0){
NextC = TRUE
ii = 1
print(ii)
while (NextC == TRUE){
templateWord = B[Row_index, 1]
if(nchar(templateWord) < 5) break
nextWord = B[Row_index+ii, 1]
print(templateWord)
print(nextWord)
#   print(length(grep(templateWord,nextWord)))
if(length(grep(templateWord,nextWord))>0) {
# Operation here
B[Row_index,2:ncol(B)] = B[Row_index,2:ncol(B)] + B[Row_index+ii, 2:ncol(B)]
ii = ii + 1
#      print(ii)
} else {NextC = FALSE}
print(NextC)
}
End_index = nrow(B)
gap = End_index - Row_index
Row_index = Row_index + 1
sprintf("the gap is %d", gap)
print(Row_index)
}
rm(list = ls())
libs <- c('tm','stringr')
lapply(libs,require,character.only = TRUE)
options(stringsAsFactors = FALSE)
setwd("G:/Codes/Text_Mining/R script_Yile")
A = read.csv("TDM77.csv", header = TRUE)
c <- matrix(nrow(A[1]), ncol = 1)
# c[, 1] = A[, 1]
temp = str_detect(A[,1], "^[a-z]+$")
temp1 = as.matrix(temp)
c = temp1
B = A[c,];
Row_index = 1
gap = 1
while (gap >= 0){
NextC = TRUE
ii = 1
print(ii)
while (NextC == TRUE){
templateWord = B[Row_index, 1]
if(nchar(templateWord) < 6) break
nextWord = B[Row_index+ii, 1]
print(templateWord)
print(nextWord)
#   print(length(grep(templateWord,nextWord)))
if(length(grep(templateWord,nextWord))>0) {
# Operation here
B[Row_index,2:ncol(B)] = B[Row_index,2:ncol(B)] + B[Row_index+ii, 2:ncol(B)]
ii = ii + 1
#      print(ii)
} else {NextC = FALSE}
print(NextC)
}
End_index = nrow(B)
gap = End_index - Row_index
Row_index = Row_index + 1
sprintf("the gap is %d", gap)
print(Row_index)
}
# write.csv(B, file = "G:\\Codes\\Text_Mining\\R script_Yile\\A2_temp.csv")
dim(B)
rm(list = ls())
libs <- c('tm','stringr')
lapply(libs,require,character.only = TRUE)
options(stringsAsFactors = FALSE)
setwd("G:/Codes/Text_Mining/R script_Yile")
A = read.csv("TDM77.csv", header = TRUE)
c <- matrix(nrow(A[1]), ncol = 1)
rm(list = ls())
libs <- c('tm','stringr')
lapply(libs,require,character.only = TRUE)
options(stringsAsFactors = FALSE)
setwd("G:/Codes/Text_Mining/R script_Yile")
A = read.csv("TDM77.csv", header = TRUE)
c <- matrix(nrow(A[1]), ncol = 1)
# c[, 1] = A[, 1]
temp = str_detect(A[,1], "^[a-z]+$")
temp1 = as.matrix(temp)
c = temp1
B = A[c,];
rm(list = ls())
libs <- c('tm','stringr')
lapply(libs,require,character.only = TRUE)
options(stringsAsFactors = FALSE)
setwd("G:/Codes/Text_Mining/R script_Yile")
A = read.csv("TDM77.csv", header = TRUE)
c <- matrix(nrow(A[1]), ncol = 1)
# c[, 1] = A[, 1]
temp = str_detect(A[,1], "^[a-z]+$")
temp1 = as.matrix(temp)
c = temp1
B = A[c,];
Row_index = 1
gap = 1
RecorderIndex = 0
while (Row_index<nrow(B)){
NextC = TRUE
ii = 1
print(ii)
while (NextC == TRUE){
templateWord = B[Row_index, 1]
if(nchar(templateWord) < 6) break
nextWord = B[Row_index+ii, 1]
print(templateWord)
print(nextWord)
if(length(grep(templateWord,nextWord))>0) {
# Operation here
B[Row_index,2:ncol(B)] = B[Row_index,2:ncol(B)] + B[Row_index+ii, 2:ncol(B)]
ii = ii + 1
RecorderIndex = c(RecorderIndex, Row_index+ii)
#      print(ii)
} else {NextC = FALSE}
print(NextC)
}
Row_index = Row_index + 1
sprintf("the gap is %d", gap)
print(Row_index)
}
# write.csv(B, file = "G:\\Codes\\Text_Mining\\R script_Yile\\A2_temp.csv")
RecorderIndex
setdiff(1:10877, RecorderIndex)
RecorderIndex = RecorderIndex(2:length(RecorderIndex))
RecorderIndex = RecorderIndex[2:length(RecorderIndex)]
RecorderIndex
RecorderIndex[2:length(RecorderIndex)]
B_select <- B[RecorderIndex,]
rm(list = ls())
libs <- c('tm','stringr')
lapply(libs,require,character.only = TRUE)
options(stringsAsFactors = FALSE)
setwd("G:/Codes/Text_Mining/R script_Yile")
A = read.csv("TDM77.csv", header = TRUE)
c <- matrix(nrow(A[1]), ncol = 1)
# c[, 1] = A[, 1]
temp = str_detect(A[,1], "^[a-z]+$")
temp1 = as.matrix(temp)
c = temp1
B = A[c,];
Row_index = 1
gap = 1
RecorderIndex = 0
while (Row_index<nrow(B)){
NextC = TRUE
ii = 1
print(ii)
while (NextC == TRUE){
templateWord = B[Row_index, 1]
if(nchar(templateWord) < 6) break
nextWord = B[Row_index+ii, 1]
print(templateWord)
print(nextWord)
if(length(grep(templateWord,nextWord))>0) {
# Operation here
B[Row_index,2:ncol(B)] = B[Row_index,2:ncol(B)] + B[Row_index+ii, 2:ncol(B)]
ii = ii + 1
RecorderIndex = c(RecorderIndex, Row_index+ii)
#      print(ii)
} else {NextC = FALSE}
print(NextC)
}
Row_index = Row_index + 1
sprintf("the gap is %d", gap)
print(Row_index)
}
RecorderIndex = RecorderIndex[2:length(RecorderIndex)]
SelectIndex = setdiff(1:nrow(B)-RecorderIndex)
B_select <- B[SelectIndex,]
# write.csv(B, file = "G:\\Codes\\Text_Mining\\R script_Yile\\A2_temp.csv")
RecorderIndex
1:nrow(B)
setdiff(1:nrow(B)-RecorderIndex)
all = 1:10877
all
setdiff(all, RecorderIndex)
allIndex = 1:nrow(B)
SelectIndex = setdiff(allIndex-RecorderIndex)
setdiff(allIndex-RecorderIndex)
allIndex = 1:nrow(B)
allIndex = 1:nrow(B)
selectIndex = setdiff(allIndex, RecorderIndex)
B_select <- B[SelectIndex,]
B_select <- B[selectIndex,]
write.csv(B, file = "G:\\Codes\\Text_Mining\\R script_Yile\\A2_temp.csv")
write.csv(B, file = "G:\\Codes\\Text_Mining\\R script_Yile\\A2_temp.csv")
write.csv(B_select, file = "G:\\Codes\\Text_Mining\\R script_Yile\\A3_temp.csv")
rm(list = ls())
libs <- c('tm','stringr')
lapply(libs,require,character.only = TRUE)
options(stringsAsFactors = FALSE)
setwd("G:/Codes/Text_Mining/R script_Yile")
A = read.csv("TDM77.csv", header = TRUE)
c <- matrix(nrow(A[1]), ncol = 1)
# c[, 1] = A[, 1]
temp = str_detect(A[,1], "^[a-z]+$")
temp1 = as.matrix(temp)
c = temp1
B = A[c,];
Row_index = 1
gap = 1
RecorderIndex = 0
while (Row_index<nrow(B)){
NextC = TRUE
ii = 1
print(ii)
while (NextC == TRUE){
templateWord = B[Row_index, 1]
if(nchar(templateWord) < 6) break
nextWord = B[Row_index+ii, 1]
print(templateWord)
print(nextWord)
if(length(grep(templateWord,nextWord))>0) {
# Operation here
B[Row_index,2:ncol(B)] = B[Row_index,2:ncol(B)] + B[Row_index+ii, 2:ncol(B)]
RecorderIndex = c(RecorderIndex, Row_index+ii)
ii = ii + 1
#      print(ii)
} else {NextC = FALSE}
print(NextC)
}
Row_index = Row_index + 1
sprintf("the gap is %d", gap)
print(Row_index)
}
RecorderIndex = RecorderIndex[2:length(RecorderIndex)]
allIndex = 1:nrow(B)
selectIndex = setdiff(allIndex, RecorderIndex)
B_select <- B[selectIndex,]
write.csv(B_select, file = "G:\\Codes\\Text_Mining\\R script_Yile\\A3_temp.csv")
# This R script is used to match the words with a dictionary, trying to delete meaningless words
remainPOS = c("apple", "pear", "NOJIDJF")
words <- remainPOS
dic.pre <- read.csv('G:/Codes/Text_Mining/R script_Yile/eng_dictionary.csv')
dic <- dic.pre[,1]
dic.cl <- tolower(dic)
dic.cl <- unique(dic.cl)
words.temp_match <- base::match(words,dic.cl)
words.match.idx <- which(!is.na(words.temp_match))
words.match <- words[words.match.idx]
words.notmatch <- words[-words.match.idx]
A2_notmatch <- A2_remain[-words.match.idx,]
print(words.match)
print(words.notmatch)
libs <- c('tm) # Just characters
lapply(libs,require,character.only = TRUE) # 'require' is a function that loads the packages named as 'libs'
Text = c("apple", "apples", "appleing")
stemDocument(Text)
libs <- c('tm') # Just characters
lapply(libs,require,character.only = TRUE) # 'require' is a function that loads the packages named as 'libs'
Text = c("apple", "apples", "appleing")
stemDocument(Text)
echo hello WorldPhones
